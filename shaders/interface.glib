////////////////////////////////////////////////////////////////////////////////
//     Copyright (c) Jon DuBois 2022. This file is part of pseudoluminal.     //
//                                                                            //
// This program is free software: you can redistribute it and/or modify       //
// it under the terms of the GNU Affero General Public License as published   //
// by the Free Software Foundation, either version 3 of the License, or       //
// (at your option) any later version.                                        //
//                                                                            //
// This program is distributed in the hope that it will be useful,            //
// but WITHOUT ANY WARRANTY; without even the implied warranty of             //
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the              //
// GNU Affero General Public License for more details.                        //
//                                                                            //
// You should have received a copy of the GNU Affero General Public License   //
// along with this program.  If not, see <https://www.gnu.org/licenses/>.     //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////
// Uniform buffer interface.                                                  //
////////////////////////////////////////////////////////////////////////////////


#define GPU_KEYBOARD 1
#define GPU_MOUSE 2
#define GPU_OTHER 3
#define MAX_INPUTS 32
#define MAX_AXES 256
#define MAX_BUTTONS 1024


layout(binding = 0) uniform UniformBufferObject {
  float time;
  float deltaTime;
  uint numDevices;
  uint _unused1;
  vec4 axes[ MAX_AXES / 4 ];
  vec4 buttons[ MAX_BUTTONS / 4 ];
  uvec4 types[ MAX_INPUTS / 4 ];
  // x = numButtons, y = numAxes, z = boffset, w = aoffset
  uvec4 devices[ MAX_INPUTS / 4 ];
};

float getType( in uint device ){
  return types[ device / 4 ][ device % 4 ];
}

float getAxis( in uint device, in uint index ){
  uint i = devices[ device ].w + index;
  return axes[ i / 4 ][ i % 4 ];
}

float getButton( in uint device, in uint index ){
  uint i = devices[ device ].z + index;
  return buttons[ i / 4 ][ i % 4 ];
}
