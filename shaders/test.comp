////////////////////////////////////////////////////////////////////////////////
//     Copyright (c) Jon DuBois 2022. This file is part of pseudoluminal.     //
//                                                                            //
// This program is free software: you can redistribute it and/or modify       //
// it under the terms of the GNU Affero General Public License as published   //
// by the Free Software Foundation, either version 3 of the License, or       //
// (at your option) any later version.                                        //
//                                                                            //
// This program is distributed in the hope that it will be useful,            //
// but WITHOUT ANY WARRANTY; without even the implied warranty of             //
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the              //
// GNU Affero General Public License for more details.                        //
//                                                                            //
// You should have received a copy of the GNU Affero General Public License   //
// along with this program.  If not, see <https://www.gnu.org/licenses/>.     //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////
// Compute shader.                                                            //
////////////////////////////////////////////////////////////////////////////////

#version 450 core
#pragma use_vulkan_memory_model

#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_EXT_scalar_block_layout : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_NV_cooperative_matrix : enable
#extension GL_NV_integer_cooperative_matrix : enable
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#extension GL_EXT_shader_explicit_arithmetic_types_int8 : enable
#extension GL_EXT_shader_explicit_arithmetic_types_int32 : enable
#extension GL_EXT_buffer_reference : enable
#extension GL_EXT_control_flow_attributes : enable

layout(std140, binding = 1) buffer outcolors{
  mat4 outbuf;
};
layout(std140, binding = 2) buffer incolors{
  mat4 inbuf;
};

shared float tm[16];
  //    1, 0, 0, 0,
  //    0, 2, 0, 0,
  //    0, 0, 1, 0,
  //    0, 0, 0, 1 
  // };
  
fcoopmatNV<16, gl_ScopeSubgroup, 16, 8> tcmat; 
void main(){
   coopMatLoadNV( tcmat, tm, 0, 4, false);
     
   outbuf[ gl_GlobalInvocationID.x ][ gl_GlobalInvocationID.y ] = tcmat.length();
  
  // outbuf//[ gl_GlobalInvocationID.x ][ gl_GlobalInvocationID.y ]
  //   *= inbuf;//[ gl_GlobalInvocationID.x ][ gl_GlobalInvocationID.y ];
}
 
