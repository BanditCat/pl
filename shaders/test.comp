////////////////////////////////////////////////////////////////////////////////
//     Copyright (c) Jon DuBois 2022. This file is part of pseudoluminal.     //
//                                                                            //
// This program is free software: you can redistribute it and/or modify       //
// it under the terms of the GNU Affero General Public License as published   //
// by the Free Software Foundation, either version 3 of the License, or       //
// (at your option) any later version.                                        //
//                                                                            //
// This program is distributed in the hope that it will be useful,            //
// but WITHOUT ANY WARRANTY; without even the implied warranty of             //
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the              //
// GNU Affero General Public License for more details.                        //
//                                                                            //
// You should have received a copy of the GNU Affero General Public License   //
// along with this program.  If not, see <https://www.gnu.org/licenses/>.     //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////
// Compute shader.                                                            //
////////////////////////////////////////////////////////////////////////////////

#version 450 core

#include "funcs.glib"
#pragma use_vulkan_memory_model

#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_EXT_scalar_block_layout : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_NV_cooperative_matrix : enable
#extension GL_NV_integer_cooperative_matrix : enable
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#extension GL_EXT_shader_explicit_arithmetic_types_int8 : enable
#extension GL_EXT_shader_explicit_arithmetic_types_int32 : enable
#extension GL_EXT_buffer_reference : enable
#extension GL_EXT_control_flow_attributes : enable

layout( local_size_x = 32, local_size_y = 1 ) in;

layout( binding = 1) coherent buffer outcolors{
  float outbuf[ 256 ];
};
layout( binding = 2) coherent buffer incolors{
  float inbuf[ 256 ];
};
layout( binding = 3) coherent buffer b{
  float bmat[ 256 ];
};
layout( binding = 4) coherent buffer c{
  float cmat[ 256 ];
};

shared float16_t a16[ 256 ];
shared float16_t b16[ 256 ];
shared float c16[ 256 ];
shared float d16[ 256 ];

const uint sz = 256;  
void main(){
  // barrier();
  // fcoopmatNV<16, gl_ScopeSubgroup  , 16, 16> b[ sz ]; 
  // fcoopmatNV<16, gl_ScopeSubgroup  , 16, 16> c[ sz ]; 
  // fcoopmatNV<16, gl_ScopeSubgroup  , 16, 16> d[ sz ]; 
  
  // for( uint i = 0; i < sz; ++i ){
  //   const uint el = i * 1;
  //   const uint st = 16;
  //   coopMatLoadNV( tcmat[ i ], outbuf, el, st, false );
  // }
  // barrier();
  // for( uint i = 0; i < sz; ++i ){
  //   const uint el = i * 1;
  //   const uint st = 16;
  //   coopMatLoadNV( b[ i ], bmat, el, st, false );
  // }
  // barrier();
  // for( uint i = 0; i < sz; ++i ){
  //   const uint el = i * 1;
  //   const uint st = 16;
  //   coopMatLoadNV( c[ i ], cmat, el, st, false );
  // }
  // barrier();
  // for( uint i = 0; i < sz; ++i ){
  //   d[ i ] = coopMatMulAddNV( tcmat[ i ], b[ i ], c[ i ] );
  // }
  // barrier();
  // for( uint i = 0; i < sz; ++i ){
  //   const uint el = i * 1;
  //   const uint st = 16;
  //   coopMatStoreNV( d[ i ], outbuf, el, st, false );
  // }
  // barrier();
  // outbuf[ 0 ] = tcmat[ 0 ].length();
  // outbuf[ 1 ] = gl_NumWorkGroups.x;
  // outbuf[ 2 ] = gl_NumWorkGroups.y;
  // outbuf[ 3 ] = gl_NumWorkGroups.z;
  // outbuf[ 4 ] = gl_SubgroupSize;
  // barrier();

  mat4 tm1 = mat4( 0, 1, 2, 3,
		   4, 5, 6, 7,
		   8, 9, 10, 11,
		   12, 13, 14, 15 );
  mat4 tm2 = mat4( 1, 1, 0, 0,
		   2, 0, 0, 0,
		   0, 0, 0, 1,
		   0, 0, 1, 0 );

  mat4 tm3 = tm1 * tm2;
  
  // outbuf[ ( gl_LocalInvocationID.y + 0 )* 16 +
  // 	  ( gl_LocalInvocationID.x + 0 )] =
  //   tm3[ gl_LocalInvocationID.y ][ gl_LocalInvocationID.x ];

  uint i = gl_LocalInvocationID.x * 8;
  for( uint j = 0; j < 8; ++j ){
    a16[ i + j ] = float16_t(inbuf[ i + j ]);
    b16[ i + j ] = float16_t(bmat[ i + j ]);
    c16[ i + j ] = (cmat[ i + j ]);
  }
  barrier();
  fcoopmatNV<16, gl_ScopeSubgroup  , 16, 16> tamat;
  fcoopmatNV<16, gl_ScopeSubgroup  , 16, 16> tbmat;
  fcoopmatNV<32, gl_ScopeSubgroup  , 16, 16> tcmat;
  fcoopmatNV<32, gl_ScopeSubgroup  , 16, 16> tdmat;

  barrier();
  coopMatLoadNV( tamat, a16, 0, 16, false );
  coopMatLoadNV( tbmat, b16, 0, 16, false );
  coopMatLoadNV( tcmat, c16, 0, 16, false );

  barrier();
  tdmat = coopMatMulAddNV( tamat, tbmat, tcmat );
  
  coopMatStoreNV( tdmat, d16, 0, 16, false );
  barrier();
  for( uint j = 0; j < 8; ++j ){
    outbuf[ i + j ] = d16[ i + j ];
  }
  barrier();
  
  
  // for( uint i = 0; i < tcmat.length(); i++ )
  //   outbuf[ i ]
  // 	= tcmat[ i ];
  //  barrier();
     
  outbuf[ 0 ] = gl_SubgroupSize;
  outbuf[ 1 ] = gl_NumSubgroups;
  outbuf[ 2 ] = tcmat.length();
  // if( gl_GlobalInvocationID.x == 255 ){
  // }
  // barrier();
}
 
