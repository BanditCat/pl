////////////////////////////////////////////////////////////////////////////////
//     Copyright (c) Jon DuBois 2022. This file is part of pseudoluminal.     //
//                                                                            //
// This program is free software: you can redistribute it and/or modify       //
// it under the terms of the GNU Affero General Public License as published   //
// by the Free Software Foundation, either version 3 of the License, or       //
// (at your option) any later version.                                        //
//                                                                            //
// This program is distributed in the hope that it will be useful,            //
// but WITHOUT ANY WARRANTY; without even the implied warranty of             //
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the              //
// GNU Affero General Public License for more details.                        //
//                                                                            //
// You should have received a copy of the GNU Affero General Public License   //
// along with this program.  If not, see <https://www.gnu.org/licenses/>.     //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////
// Compute shader.                                                            //
////////////////////////////////////////////////////////////////////////////////

#version 460

layout(binding = 0) uniform UniformBufferObject {
  vec4 time;
  vec4 axes[ 64 ];
  ivec4 buttons[ 64 ];
};
struct state{
  mat4 proj;
  vec3 pos;
  float far;
  float near;
  vec3 rot;
};
layout( binding = 1) buffer outb{ state outstate; };
layout( binding = 2) buffer inb{ state instate; };

layout( binding = 3 ) uniform aspect{
  float aspx;
  float aspy;
};

mat4 rotxMat( float angle ){
  return transpose( mat4( 1, 0, 0, 0,
			  0, cos( angle ), -sin( angle ), 0,
			  0, sin( angle ), cos( angle ), 0,
			  0, 0, 0, 1 ) );
}

mat4 projMat( float leftright, float topbottom, float near, float far ){
  return transpose( mat4( near / leftright, 0, 0, 0,
	       0, near / topbottom, 0, 0,
	       0, 0, ( near + far ) / ( near - far ),
	       ( 2 * near * far ) / ( near - far ),
	       0, 0, -1, 0 ) );
}
mat4 posMat( vec3 pos ){
  return transpose( mat4( 1, 0, 0, pos.x,
	       0, 1, 0, pos.y,
	       0, 0, 1, pos.z,
	       0, 0, 0, 1 ) );
}

void main(){
  outstate.far = instate.far + ( buttons[ 0 ].x - buttons[ 0 ].y ) * 0.01;
  outstate.near = instate.near + ( buttons[ 0 ].z - buttons[ 0 ].w ) * 0.01;
  outstate.pos = instate.pos + vec3( -axes[ 0 ].y, -axes[ 0 ].x, axes[ 1 ].x ) * 0.004;
  outstate.rot = instate.rot + vec3( -axes[ 0 ].z, -axes[ 0 ].w, 0 ) * 0.004;
  //outstate.proj =  posMat( outstate.pos ) * projMat( aspy, aspx, 0.1, 0.5 );
  mat4 rxm = rotxMat( outstate.rot.y );
  mat4 psm = posMat( outstate.pos + vec3 ( 0, 0, -3 ) );
  mat4 prjm = projMat( aspy, aspx, outstate.near + 0.1, outstate.far + 100.0 );
  outstate.proj = prjm * rxm * psm;  
}
 
