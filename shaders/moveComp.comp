////////////////////////////////////////////////////////////////////////////////
//     Copyright (c) Jon DuBois 2022. This file is part of pseudoluminal.     //
//                                                                            //
// This program is free software: you can redistribute it and/or modify       //
// it under the terms of the GNU Affero General Public License as published   //
// by the Free Software Foundation, either version 3 of the License, or       //
// (at your option) any later version.                                        //
//                                                                            //
// This program is distributed in the hope that it will be useful,            //
// but WITHOUT ANY WARRANTY; without even the implied warranty of             //
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the              //
// GNU Affero General Public License for more details.                        //
//                                                                            //
// You should have received a copy of the GNU Affero General Public License   //
// along with this program.  If not, see <https://www.gnu.org/licenses/>.     //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////
// Compute shader.                                                            //
////////////////////////////////////////////////////////////////////////////////

#version 460
#include "interface.glib"
#include "funcs.glib"


struct state{
  mat4 projm;
  mat4 rotm;
  mat4 irotm;
  mat4 posm;
  vec3 pos;
  float fov;
  vec3 rot;
  bool init;
};
layout( binding = 1 ) writeonly restrict buffer outb{ state outstate; };
layout( binding = 2 ) readonly restrict buffer inb{ state instate; };

layout( binding = 3 ) uniform aspect{
  float aspx;
  float aspy;
};


void main(){
  state next;
  if( !instate.init ){
    next.pos = next.rot = vec3( 0 );
    next.fov = 1;
    next.rotm = mat4( 1, 0, 0, 0,
		      0, 1, 0, 0,
		      0, 0, 1, 0,
		      0, 0, 0, 1 );
    next.irotm = mat4( 1, 0, 0, 0,
		       0, 1, 0, 0,
		       0, 0, 1, 0,
		       0, 0, 0, 1 );
    next.init = true;
  } else
    next = instate;
  next.rot = vec3( 0, 0, 0 );
  for( uint i = 0; i < numDevices; ++i ){
    if( getType( i ) == GPU_MOUSE ){
      if( getButton( i, 0 ) > 0.1 ){
	vec4 pdelta = vec4( vec3( getAxis( i, 0 ), -getAxis( i, 1 ),
		      0 ) * deltaTime * 5, 1 );

	next.pos += ( instate.irotm * pdelta ).xyz;
      }else if( getButton( i, 1 ) > 0.1 ){
	vec4 pdelta = vec4( vec3( getAxis( i, 0 ), 0,
		      -getAxis( i, 1 ) ) * deltaTime * 5, 1 );

	next.pos += ( instate.irotm * pdelta ).xyz;
      }else{
	next.fov += -getAxis( i, 2 ) * deltaTime * 0.5;
	next.rot += vec3( getAxis( i, 0 ), getAxis( i, 1 ),
			  0
			  ) * deltaTime;
      }
    }
    if( getType( i ) == GPU_KEYBOARD ){
      next.fov += ( getButton( i, 40 ) - getButton( i, 38 ) ) * deltaTime;
      vec4 pdelta = vec4( vec3( getButton( i, 0x41 ) - getButton( i, 0x44 ),
				getButton( i, 0x10 ) - getButton( i, 0x11 ),
				getButton( i, 0x57 ) - getButton( i, 0x53 )
				) * deltaTime * 5, 1 );
      next.pos += ( instate.irotm * pdelta ).xyz;
      next.rot += vec3( 0, 0,
			getButton( i, 0x51 ) - getButton( i, 0x45 )
			) * deltaTime;
    }
    // Treat as xbone controller
    if( getType( i ) == GPU_OTHER ){
      next.fov += ( getButton( i, 2 ) - getButton( i, 3 ) ) * deltaTime;
      vec4 pdelta = vec4( vec3( -getAxis( i, 1 ), -getAxis( i, 0 ),
				-getAxis( i, 4 ) ) * deltaTime * 5, 1 );
      next.pos += ( instate.irotm * pdelta ).xyz;
      next.rot += vec3( getAxis( i, 3 ), -getAxis( i, 2 ),
			getButton( i, 4 ) - getButton( i, 5 )  ) * deltaTime;
    }
  }
  next.projm = projMat( aspy * next.fov * 0.01, aspx * next.fov * 0.01,
			0.01, 1000.0 );
  next.posm = posMat( next.pos + vec3 ( 0, 0, -3 ) );
  next.irotm = next.irotm * rotxMat( -next.rot.y ) *
    rotyMat( -next.rot.x ) * rotzMat( -next.rot.z );
  next.rotm = rotzMat( next.rot.z ) * rotyMat( next.rot.x ) *
    rotxMat( next.rot.y ) * next.rotm;

  outstate = next;
}
 
