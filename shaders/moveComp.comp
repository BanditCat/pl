////////////////////////////////////////////////////////////////////////////////
//     Copyright (c) Jon DuBois 2022. This file is part of pseudoluminal.     //
//                                                                            //
// This program is free software: you can redistribute it and/or modify       //
// it under the terms of the GNU Affero General Public License as published   //
// by the Free Software Foundation, either version 3 of the License, or       //
// (at your option) any later version.                                        //
//                                                                            //
// This program is distributed in the hope that it will be useful,            //
// but WITHOUT ANY WARRANTY; without even the implied warranty of             //
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the              //
// GNU Affero General Public License for more details.                        //
//                                                                            //
// You should have received a copy of the GNU Affero General Public License   //
// along with this program.  If not, see <https://www.gnu.org/licenses/>.     //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////
// Compute shader.                                                            //
////////////////////////////////////////////////////////////////////////////////

#version 460

#extension GL_EXT_scalar_block_layout : enable

layout(binding = 0, scalar) uniform UniformBufferObject {
  float time;
  float axes[ 256 ];
  bvec4 buttons[ 256 ];
};
struct state{
  mat4 proj;
  vec3 pos;
};
layout( binding = 1) buffer outb{ state outstate; };
layout( binding = 2) buffer inb{ state instate; };

layout( binding = 3 ) uniform aspect{
  float aspx;
  float aspy;
};

mat4 projMat( float leftright, float topbottom, float near, float far ){
  return mat4( near / leftright, 0, 0, 0,
	       0, near / topbottom, 0, 0,
	       0, 0, ( near + far ) / ( near - far ),
	       ( 2 * near * far ) / ( near - far ),
	       0, 0, -1, 0 );
}
mat4 posMat( vec3 pos ){
  return mat4( 1, 0, 0, 0,
	       0, 1, 0, 0,
	       0, 0, 1, 0,
	       pos, 1 );
}

void main(){
  outstate.pos = instate.pos + vec3( axes[ 1 ], axes[ 0 ], axes[ 4 ] ) * 0.004;
  outstate.proj = projMat( aspy, aspx, 0.1, 1 ) * posMat( outstate.pos ) ;   
}
 
