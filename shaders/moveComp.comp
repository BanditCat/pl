////////////////////////////////////////////////////////////////////////////////
//     Copyright (c) Jon DuBois 2022. This file is part of pseudoluminal.     //
//                                                                            //
// This program is free software: you can redistribute it and/or modify       //
// it under the terms of the GNU Affero General Public License as published   //
// by the Free Software Foundation, either version 3 of the License, or       //
// (at your option) any later version.                                        //
//                                                                            //
// This program is distributed in the hope that it will be useful,            //
// but WITHOUT ANY WARRANTY; without even the implied warranty of             //
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the              //
// GNU Affero General Public License for more details.                        //
//                                                                            //
// You should have received a copy of the GNU Affero General Public License   //
// along with this program.  If not, see <https://www.gnu.org/licenses/>.     //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////
// Compute shader.                                                            //
////////////////////////////////////////////////////////////////////////////////

#version 460
#include "funcs.glib"

layout(binding = 0) uniform UniformBufferObject {
  vec4 time;
  vec4 axes[ 64 ];
  ivec4 buttons[ 64 ];
};
struct state{
  mat4 projm;
  mat4 rotm;
  mat4 irotm;
  mat4 posm;
  vec3 pos;
  float fov;
  vec3 rot;
  bool init;
};
layout( binding = 1) buffer outb{ state outstate; };
layout( binding = 2) buffer inb{ state instate; };

layout( binding = 3 ) uniform aspect{
  float aspx;
  float aspy;
};


void main(){
  if( !instate.init ){
    instate.rotm = mat4( 1, 0, 0, 0,
			  0, 1, 0, 0,
			  0, 0, 1, 0,
			  0, 0, 0, 1 );
    instate.irotm = mat4( 1, 0, 0, 0,
			   0, 1, 0, 0,
			   0, 0, 1, 0,
			   0, 0, 0, 1 );
    outstate.init = true;
    instate.init = true;
  }
  outstate.fov = instate.fov + ( buttons[ 0 ].z - buttons[ 0 ].w ) * 0.01;
  vec4 pdelta = vec4( vec3( -axes[ 0 ].y, -axes[ 0 ].x, -axes[ 1 ].x ) * 0.04,
		      1 );
  outstate.pos = instate.pos + ( instate.irotm * pdelta ).xyz;
  outstate.rot = vec3( axes[ 0 ].w, -axes[ 0 ].z,
		       buttons[ 1 ].x - buttons[ 1 ].y  ) * 0.015;
  //outstate.proj =  posMat( outstate.pos ) * projMat( aspy, aspx, 0.1, 0.5 );
  float fov = outstate.fov + 1;
  outstate.projm = projMat( aspy * fov * 0.01, aspx * fov * 0.01,
			    0.01, 1000.0 );
  outstate.posm = posMat( outstate.pos + vec3 ( 0, 0, -3 ) );
  outstate.irotm = instate.irotm * rotxMat( -outstate.rot.y ) *
    rotyMat( -outstate.rot.x ) * rotzMat( -outstate.rot.z );
  outstate.rotm = rotzMat( outstate.rot.z ) * rotyMat( outstate.rot.x ) *
    rotxMat( outstate.rot.y ) * instate.rotm;
}
 
