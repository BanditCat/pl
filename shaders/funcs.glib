////////////////////////////////////////////////////////////////////////////////
//     Copyright (c) Jon DuBois 2022. This file is part of pseudoluminal.     //
//                                                                            //
// This program is free software: you can redistribute it and/or modify       //
// it under the terms of the GNU Affero General Public License as published   //
// by the Free Software Foundation, either version 3 of the License, or       //
// (at your option) any later version.                                        //
//                                                                            //
// This program is distributed in the hope that it will be useful,            //
// but WITHOUT ANY WARRANTY; without even the implied warranty of             //
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the              //
// GNU Affero General Public License for more details.                        //
//                                                                            //
// You should have received a copy of the GNU Affero General Public License   //
// along with this program.  If not, see <https://www.gnu.org/licenses/>.     //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

mat4 rotzMat( float angle ){
  return transpose( mat4( cos( angle ), -sin( angle ), 0, 0,
			  sin( angle ), cos( angle ), 0, 0,
			  0, 0, 1, 0,
			  0, 0, 0, 1 ) );
}
mat4 rotyMat( float angle ){
  return transpose( mat4( cos( angle ), 0, sin( angle ), 0,
			  0, 1, 0, 0,
			  -sin( angle ), 0, cos( angle ), 0,
			  0, 0, 0, 1 ) );
}
mat4 rotxMat( float angle ){
  return transpose( mat4( 1, 0, 0, 0,
			  0, cos( angle ), -sin( angle ), 0,
			  0, sin( angle ), cos( angle ), 0,
			  0, 0, 0, 1 ) );
}

mat4 projMat( float leftright, float topbottom, float near, float far ){
  return transpose( mat4( near / leftright, 0, 0, 0,
			  0, near / topbottom, 0, 0,
			  0, 0, ( near + far ) / ( near - far ),
			  ( 2 * near * far ) / ( near - far ),
			  0, 0, -1, 0 ) );
}

mat4 faceMat( vec3 newz ){
  vec3 vnz = normalize( newz );
  vec3 vnx = normalize( cross( vec3( 0, 1, 0 ), vnz ) );
  vec3 vny = cross( vnz, vnx );
  return mat4( vnx, 0,
	       vny, 0,
	       vnz, 0,
	       0, 0, 0, 1 );
}

mat4 posMat( vec3 pos ){
  return transpose( mat4( 1, 0, 0, pos.x,
			  0, 1, 0, pos.y,
			  0, 0, 1, pos.z,
			  0, 0, 0, 1 ) );
}
