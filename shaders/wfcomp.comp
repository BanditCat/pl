////////////////////////////////////////////////////////////////////////////////
//     Copyright (c) Jon DuBois 2022. This file is part of pseudoluminal.     //
//                                                                            //
// This program is free software: you can redistribute it and/or modify       //
// it under the terms of the GNU Affero General Public License as published   //
// by the Free Software Foundation, either version 3 of the License, or       //
// (at your option) any later version.                                        //
//                                                                            //
// This program is distributed in the hope that it will be useful,            //
// but WITHOUT ANY WARRANTY; without even the implied warranty of             //
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the              //
// GNU Affero General Public License for more details.                        //
//                                                                            //
// You should have received a copy of the GNU Affero General Public License   //
// along with this program.  If not, see <https://www.gnu.org/licenses/>.     //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////
// Compute shader.                                                            //
////////////////////////////////////////////////////////////////////////////////

#version 460

#extension GL_EXT_control_flow_attributes : enable
#include "interface.glib"


layout( local_size_x_id = 0 ) in;
layout(constant_id = 1) const float epsilon = 0;
layout(constant_id = 2) const float maxTime = 0;
layout(constant_id = 3) const uint ocdim = 4;
layout(constant_id = 4) const uint ocdepth = 3;
layout(constant_id = 5) const uint ocnodeCount = 10;
layout(constant_id = 6) const float ocscale = 50.0;

struct particle{
  vec4 pos;
  vec4 vel;
};

const uint ocdatasize = ( ocdim * ocdim * ocdim ) / 4;
struct oc{
  // pos.w is particle count
  vec4 pos;
  vec4 mass;
  vec4 data[ ocdatasize ];
};
layout( binding = 3 ) readonly buffer octree{
  uint next;
  oc tree[ ocnodeCount ];
};







struct line{
  vec4 start;
  vec4 end;
};
layout( binding = 1 ) writeonly restrict buffer lines{
  line points[];
};

vec3 starts[ 12 ] = {
  vec3( -1, 1, 1 ),		     
  vec3( -1, -1, 1 ),		     
  vec3( -1, 1, -1 ),		     
  vec3( -1, -1, -1 ),		     
  vec3( 1, -1, 1 ),		     
  vec3( 1, -1, -1 ),		     
  vec3( -1, -1, 1 ),		     
  vec3( -1, -1, -1 ),		     
  vec3( 1, 1, -1 ),		     
  vec3( -1, 1, -1 ),		     
  vec3( 1, -1, -1 ),		     
  vec3( -1, -1, -1 )
};
vec3 ends[ 12 ] = {
  vec3( 1, 1, 1 ),		     
  vec3( 1, -1, 1 ),		     
  vec3( 1, 1, -1 ),		     
  vec3( 1, -1, -1 ),		     
  vec3( 1, 1, 1 ),		     
  vec3( 1, 1, -1 ),		     
  vec3( -1, 1, 1 ),		     
  vec3( -1, 1, -1 ),		     
  vec3( 1, 1, 1 ),		     
  vec3( -1, 1, 1 ),		     
  vec3( 1, -1, 1 ),		     
  vec3( -1, -1, 1 )
};
void main(){
  uint i = ( gl_GlobalInvocationID.x / 12 );
  uint j = ( gl_GlobalInvocationID.x % 12 );
  float fi = i / 64.0;
  points[ gl_GlobalInvocationID.x ].start = tree[ i ].mass + vec4( starts[ j ], 0 );	
  points[ gl_GlobalInvocationID.x ].end = tree[ i ].mass + vec4( ends[ j ], 0 );	
}

