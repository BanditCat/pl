;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;                    Copyright (c) Jon DuBois 2022.                          ;;
;;                                                                            ;;
;; This program is free software: you can redistribute it and/or modify       ;;
;; it under the terms of the GNU Affero General Public License as published   ;;
;; by the Free Software Foundation, either version 3 of the License, or       ;; 
;; (at your option) any later version.                                        ;;
;;                                                                            ;;
;; This program is distributed in the hope that it will be useful,            ;;
;; but WITHOUT ANY WARRANTY; without even the implied warranty of             ;;
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the              ;;
;; GNU Affero General Public License for more details.                        ;;
;;                                                                            ;;
;; You should have received a copy of the GNU Affero General Public License   ;;
;; along with this program.  If not, see <https://www.gnu.org/licenses/>.     ;;
;;                                                                            ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(ansi-color-faces-vector
   [default default default italic underline success warning error])
 '(ansi-color-names-vector
   ["#212526" "#ff4b4b" "#b4fa70" "#fce94f" "#729fcf" "#e090d7" "#8cc4ff" "#eeeeec"])
 '(cua-mode t nil (cua-base))
 '(custom-enabled-themes '(wheatgrass))
 '(desktop-save-mode t)
 '(global-tab-line-mode t)
 '(shell-file-name "C:\\Program Files\\Git\\bin\\bash.exe")
 '(show-paren-mode t)
 '(tab-bar-mode nil)
 '(tab-line-tabs-function 'tab-line-tabs-window-buffers))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )

(defun bandit-run (&optional arg) (interactive)
       (bandit-save)
       (cond
	((eq major-mode 'emacs-lisp-mode) (eval-buffer) (message "ran"))
	((eq major-mode 'c-mode) (compile (concat "make " arg)))
	(t (message "Unsupported language"))))

(defun bandit-copypaste () (interactive)
       (if mark-active (kill-region (mark) (point))
	 (yank)))
(defun bandit-save () (interactive)
       (save-some-buffers t)
       (message "Saved all buffers"))
(defun bandit-kill () (interactive)
       (kill-buffer (current-buffer)))
(defun bandit-indent () (interactive)
       (save-excursion
	 (indent-region (point-min) (point-max) nil)))

(defun bandit-next-window () (interactive)
       (select-window (next-window)))
(defun bandit-previous-window () (interactive)
       (select-window (previous-window)))
(defun bandit-next-tab () (interactive)
       (if (/= 1 (length (tab-line-tabs-window-buffers)))
	   (tab-line-select-tab-buffer
	    (elt (tab-line-tabs-window-buffers)
		 (mod (+ 1 (seq-position (tab-line-tabs-window-buffers) (current-buffer))) (length (tab-line-tabs-window-buffers)))))))
(defun bandit-previous-tab () (interactive)
       (if (/= 1 (length (tab-line-tabs-window-buffers)))
	   (tab-line-select-tab-buffer
	    (elt (tab-line-tabs-window-buffers)
		 (mod (+ (- (length (tab-line-tabs-window-buffers)) 1)
			 (seq-position (tab-line-tabs-window-buffers) (current-buffer))) (length (tab-line-tabs-window-buffers)))))))

(global-set-key (kbd "<kp-decimal>") 'bandit-copypaste)
(global-set-key (kbd "C-s") 'bandit-save)  
(global-set-key (kbd "<mouse-2>") 'shell)
(global-set-key (kbd "<mouse-4>") 'bandit-previous-tab)
(global-set-key (kbd "<mouse-5>") 'bandit-next-tab)
(global-set-key (kbd "<M-right>") 'bandit-next-tab)
(global-set-key (kbd "<M-left>") 'bandit-previous-tab)
(global-set-key (kbd "<M-up>") 'bandit-previous-window)
(global-set-key (kbd "<M-down>") 'bandit-next-window)
(global-set-key (kbd "<f12>") 'bandit-kill)
(global-set-key (kbd "<f5>") 'bandit-run)
(global-set-key (kbd "<f1>") 'find-file)
(global-set-key (kbd "<f2>") 'ispell-comments-and-strings)
(global-set-key (kbd "<f3>") 'bandit-indent)
(global-set-key (kbd "<f6>") (lambda () (interactive) (bandit-run "rall")))
(global-set-key (kbd "<f7>") (lambda () (interactive) (bandit-run "clean")))
(global-set-key (kbd "<f8>") (lambda () (interactive) (bandit-run "backup")))

(global-set-key (kbd "C-a") 'mark-whole-buffer)
(global-set-key (kbd "C-f") 'isearch-forward)
(global-set-key (kbd "C-S-f") (lambda () (interactive) (multi-occur-in-matching-buffers ".*" (read-string "Regexp:"))))


(add-to-list 'exec-path "C:/root/bin/")

(setq ispell-program-name (locate-file "hunspell"
				       exec-path exec-suffixes 'file-executable-p))

(require 'ispell)
(defun next-read-file-uses-dialog-p () t)

(setq display-buffer-base-action
      (cons 'display-buffer-use-some-window
            '((inhibit-same-window . t)
              (inhibit-switch-frame . nil))))

(setq backup-directory-alist
      `((".*" . "~/backups" )))
